%% Documentation

% Data Processing from Hotfire 1 ("HF1") of BJ-01 Hybrid Engine
% Original Author: Dan Zanko (11/22/2019)

%% Initialization

clear, clc, close all

ft = load('HF1_fulltest.mat');
fb = load('HF1_fullburn.mat');
nb = load('HF1_nomburn.mat');

% NOTE::::: 
%      structure tag "ft" = full test data
%      structure tag "fb" = full burn data (includes long trailoff)
%      structure tag "nb" = portion of burn before blowdown (pulled from "ft")

% ** this was done for ease of coding/shorthand **

%% Creating important vars from data to use in calcs later on

% var for easy referencing of length
    ft.l = length(ft.LCR1);
    ft.dtime = diff(ft.time);

    fb.l = length(fb.LCR1);
    fb.dtime(1,1) = 0;
    fb.dtime(2:fb.l,1) = diff(fb.time);

    nb.l = length(nb.LCR1);
    nb.dtime(1,1) = 0;
    nb.dtime(2:nb.l,1) = diff(nb.time);


% N2O Mass Flow Rates
    fb.mdot_ox(1,1) = 0;
    fb.mdot_ox(2:fb.l,1) = -diff(fb.LCR1)./fb.dtime(2:fb.l,1);

    nb.mdot_ox(1,1) = 0;
    nb.mdot_ox(2:nb.l,1) = -diff(nb.LCR1)./nb.dtime(2:nb.l,1);
    
% Thrust (total thrust = sum of the two thrust load cells)
    fb.thrust = fb.LCC1 + fb.LCC2;
    
    nb.thrust = nb.LCC1 + nb.LCC2;

%% Ox Flow Calcs
eng.d_injhole = 5/64; % [in]
eng.n_injholes = 14;
eng.A_injhole = pi*(eng.d_injhole^2)/4; % [in^2]
eng.A_inj = eng.n_injholes * eng.A_injhole; % [in^2]

% WARNING THAT THIS IS EFFECTIVELY TAKING THE CdA of the ENTIRE LOWER
% PLUMBING LINES (NOT the injector)

fb.deltaP = fb.PTR1 - fb.PTC1; % diff in pressure from ox tank to CC (psi)

for i = 1:nb.l
    fb.rho_ox(i,1) = 0.000036127*N2O_NonSat_Lookup(FtoK(fb.TCR3(i)),psi2MPa(fb.PTR1(i)),"Density"); % density of n2o downstream of runtank converted to lbm/in^3
    if fb.deltaP(i,1) < 0
        fb.CdA(i,1) = 0;
    else
        fb.CdA(i,1) = fb.mdot_ox(i,1)./sqrt(2*32.2*12*fb.rho_ox(i,1).*fb.deltaP(i,1));
    end
end

%% Regression Calcs

% **DISCLAIMER**
% Because we actually ran out of HDPE to combust, these regression calcs
% are incredibly sketchy

% A total time to fuel depletion was estimated from the data, yielding a
% rough value for average mdot.

% This can then be used to get a rough value for average specific impulse



%% Engine Performance Calcs

fb.totimpulse = sum(fb.dtime.*fb.thrust);
fb.thrustavg = mean(fb.thrust(7:fb.l));

%% Full Burn Plots

    %% Plotting thrust and tank pressure vs. time
    figure, hold on
        subplot(2,1,1)
            plot(fb.time,fb.LCR1)
            grid on, grid minor
            xlabel('Time (s)')
            ylabel('N_2O Mass (lbm)')
            title('N_2O Mass vs. Time - HF1')
        subplot(2,1,2)
            plot(fb.time,fb.PTR1)
            grid on, grid minor
            xlabel('Time (s)')
            ylabel('Tank Pressure (psia)')
            title('Lower Tank Pressure vs. Time - HF1')
    hold off

    %% Plotting solely thrust vs. time
    figure('Name', 'Thrust'), hold on

        plot(fb.time,fb.thrust, fb.time,smooth(fb.thrust));

        xlabel('Time (s)')
        ylabel('Thrust (lbf)')
        title('Thrust vs. Time - HF1')
        grid on, grid minor
        legend('Raw','Smoothed')

    hold off

    %% Plotting thrust and chamber pressure vs. time
    figure('Name', 'Thrust & Chamber P'), hold on

        yyaxis left
            plot(fb.time,fb.thrust);
            ylabel('Thrust (lbf)')

        yyaxis right
            plot(fb.time,fb.PTC1); 
            ylabel('Chamber Pressure (psia)')

        xlabel('Time (s)')
        title('Thrust and Chamber Pressure vs. Time - HF1')
        grid on, grid minor

    hold off

    %% plotting ox tank and chamber pressures
    figure('Name', 'Tank & Chamber P'), hold on

        plot(nb.time, nb.PTR1, nb.time, nb.PTC1);

        xlabel('Time (s)')
        ylabel('Pressure (psia)')
        title('Pressure vs. Time - HF1')
        legend('Tank Pressure','Chamber Pressure')
        grid on, grid minor

    hold off

%% plotting smoothed pressures vs. not smoothed
figure('Name', 'Chamber P'), hold on
    
    plot(nb.time, nb.PTC1, nb.time, nb_smth.PTC1);
    
    xlabel('Time (s)')
    ylabel('Pressure (psia)')
    title('Chamber Pressure vs. Time - HF1')
    legend('Raw','Smoothed')
    grid on, grid minor
    
hold off

%% plotting smoothed mdot_ox vs. not smoothed
figure('Name', 'Chamber P'), hold on
    
    plot(nb.time, nb.mdot_ox, nb.time, nb_smth.mdot_ox);
    
    xlabel('Time (s)')
    ylabel('N_2O Mass Flow Rate (lbm/s)')
    title('Oxidizer Mass Flow Rate vs. Time - HF1')
    legend('Raw','Smoothed')
    grid on, grid minor
    
hold off

%% plotting mdot and deltaP b/w OxTank and CC vs. time 
figure('Name', 'mdot & dP'), hold on

    subplot(2,1,1)
    	plot(nb.time, nb.mdot_ox)
        xlabel('Time (s)')
        ylabel('Oxidizer Mass Flow Rate (lbm/s)')
        grid on, grid minor
        title('Ox Flow Rate vs. Time - HF1')

        
    subplot(2,1,2)
        plot(nb.time, nb.deltaP);
        xlabel('Time (s)')
        ylabel('\DeltaP Tank-to-Chamber (psig)')
        grid on, grid minor
        title('Ox Flow Rate and \Delta P vs. Time - HF1')
    
hold off


%% (CURRENTLY COMMENTED OUT) plotting effective discharge area vs. time
% 
% 
% figure('Name', 'CdA'), hold on
% 
%     plot(nb.time,nb.CdA)
%     
%     nb.Cd = nb.CdA/eng.A_inj;
%     xlabel('Time (s)')
%     ylabel('Effective Discharge Area (in^2)')
%     title('Effective Discharge Area vs. Time - HF1 - TAKEN USING P_{TANK} b/c INJECT PT FAILED - USE WITH CAUTION')
%     grid on, grid minor
%     
% hold off
