function [methodinfo,structs,enuminfo,ThunkLibName]=rp_proto64
%RP_PROTO64 Create structures to define interfaces found in 'REFPROP'.

%This function was generated by loadlibrary.m parser version  on Wed Feb 26 20:24:09 2020
%perl options:'REFPROP.i -outfile=rp_proto64.m -thunkfile=REFPRP64_thunk_pcwin64.c -header=REFPROP.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'REFPRP64_thunk_pcwin64');
% void ABFL1dll ( double * a , double * b , double * x , int * kph , char * ab , double * dmin , double * dmax , double * t , double * p , double * d , int * ierr , char * herr , int ab_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='ABFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void ABFL2dll ( double * a , double * b , double * z , int * kq , int * ksat , char * ab , double * tbub , double * tdew , double * pbub , double * pdew , double * dlbub , double * dvdew , double * ybub , double * xdew , double * t , double * p , double * dl , double * dv , double * x , double * y , double * q , int * ierr , char * herr , int ab_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='ABFL2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void ACTVYdll ( double * t , double * rho , double * x , double * actv , double * gamma , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='ACTVYdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void AGdll ( double * t , double * rho , double * x , double * a , double * g ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AGdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void B12dll ( double * t , double * x , double * b ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='B12dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void BLCRVdll ( double * d , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='BLCRVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CCRITdll ( double * t , double * p , double * v , double * x , double * cs , double * ts , double * ds , double * ps , double * ws , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='CCRITdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CHEMPOTdll ( double * t , double * rho , double * x , double * u , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='CHEMPOTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CP0dll ( double * t , double * x , double * cp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CP0dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void CRITPdll ( double * x , double * tc , double * pc , double * dc , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='CRITPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CSATKdll ( int * icomp , double * t , int * kph , double * p , double * rho , double * csat , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='CSATKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CSTARdll ( double * t , double * p , double * v , double * x , double * cs , double * ts , double * ds , double * ps , double * ws , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='CSTARdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CV2PKdll ( int * icomp , double * t , double * rho , double * cv2p , double * csat , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='CV2PKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void CVCPKdll ( int * icomp , double * t , double * rho , double * cv , double * cp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CVCPKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void CVCPdll ( double * t , double * rho , double * x , double * cv , double * cp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='CVCPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DBDTdll ( double * t , double * x , double * b ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DBDTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DBFL1dll ( double * d , double * b , double * x , char * ab , double * t , double * p , int * ierr , char * herr , int ab_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='DBFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void DBFL2dll ( double * d , double * b , double * z , int * kq , char * ab , double * t , double * p , double * dl , double * dv , double * x , double * y , double * q , int * ierr , char * herr , int ab_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='DBFL2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void DDDPdll ( double * t , double * rho , double * x , double * drhodp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DDDPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DDDTdll ( double * t , double * rho , double * x , double * drhodt ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DDDTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DEFL1dll ( double * rho , double * e , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DEFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DEFLSHdll ( double * d , double * e , double * z , double * t , double * p , double * dl , double * dv , double * x , double * y , double * q , double * h , double * s , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DEFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DERVPVTdll ( double * t , double * rho , double * x , double * dpdd , double * dpdt , double * d2pdd2 , double * d2pdt2 , double * d2pdtd , double * dddp , double * dddt , double * d2ddp2 , double * d2ddt2 , double * d2ddpt , double * dtdp , double * dtdd , double * d2tdp2 , double * d2tdd2 , double * d2tdpd ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DERVPVTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DHD1dll ( double * t , double * rho , double * x , double * dhdt_d , double * dhdt_p , double * dhdd_t , double * dhdd_p , double * dhdp_t , double * dhdp_d ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DHD1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DHFL1dll ( double * rho , double * h , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DHFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DHFLSHdll ( double * d , double * h , double * z , double * t , double * p , double * dl , double * dv , double * x , double * y , double * q , double * e , double * s , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DHFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DIELECdll ( double * t , double * rho , double * x , double * de ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DIELECdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DLSATKdll ( int * icomp , double * t , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DLSATKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DOTFILLdll ( double * x , double * ptest , double * filrat , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DOTFILLdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DPDD2dll ( double * t , double * rho , double * x , double * d2pdd2 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPDD2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DPDDKdll ( int * icomp , double * t , double * rho , double * dpdrho ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPDDKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DPDDdll ( double * t , double * rho , double * x , double * dpdrho ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPDDdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DPDTKdll ( int * icomp , double * t , double * rho , double * dpt ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPDTKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DPDTdll ( double * t , double * rho , double * x , double * dpt ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DPDTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void DPTSATKdll ( int * icomp , double * t , int * kph , double * p , double * rho , double * csat , double * dpt , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DPTSATKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DQFL2dll ( double * d , double * q , double * z , int * kq , double * t , double * p , double * dl , double * dv , double * x , double * y , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DQFL2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DSFL1dll ( double * rho , double * s , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DSFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DSFLSHdll ( double * d , double * s , double * z , double * t , double * p , double * dl , double * dv , double * x , double * y , double * q , double * e , double * h , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DSFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void DVSATKdll ( int * icomp , double * t , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='DVSATKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void ENTHALdll ( double * t , double * rho , double * x , double * h ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENTHALdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void ENTROdll ( double * t , double * rho , double * x , double * s ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENTROdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void ESFLSHdll ( double * e , double * s , double * z , double * t , double * p , double * d , double * dl , double * dv , double * x , double * y , double * q , double * h , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='ESFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void EXCESSdll ( double * t , double * p , double * x , int * kph , double * rho , double * ve , double * ee , double * he , double * se , double * ae , double * ge , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='EXCESSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void FGCTY2dll ( double * t , double * rho , double * x , double * f , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='FGCTY2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void FGCTYdll ( double * t , double * rho , double * x , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FGCTYdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void FPVdll ( double * t , double * rho , double * p , double * x , double * f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='FPVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void FUGCOFdll ( double * t , double * rho , double * x , double * f , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='FUGCOFdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void GERG04dll ( int * ncc , int * iflag , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='GERG04dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void GETFIJdll ( char * hmodij , double * fij , char * hfij2 , char * hmxrul , int hmodij_length , int hfij2_length , int hmxrul_length ); 
fcns.thunkname{fcnNum}='voidcstringvoidPtrcstringcstringint32int32int32Thunk';fcns.name{fcnNum}='GETFIJdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'cstring', 'cstring', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void GETKTVdll ( int * icomp , int * jcomp , char * hmodij , double * fij , char * hfmix , char * hfij2 , char * hbinp , char * hmxrul , int hmodij_length , int hfmix_length , int hfij2_length , int hbinp_length , int hmxrul_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrcstringvoidPtrcstringcstringcstringcstringint32int32int32int32int32Thunk';fcns.name{fcnNum}='GETKTVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'cstring', 'doublePtr', 'cstring', 'cstring', 'cstring', 'cstring', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void GETMODdll ( int * icomp , char * htype , char * hcode , char * hcite , int htype_length , int hcode_length , int hcite_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringcstringcstringint32int32int32Thunk';fcns.name{fcnNum}='GETMODdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'cstring', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void GIBBSdll ( double * t , double * rho , double * x , double * ar , double * gr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GIBBSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void HEATFRMdll ( double * t , double * rho , double * x , double * hfrm , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='HEATFRMdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void HEATdll ( double * t , double * rho , double * x , double * hg , double * hn , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='HEATdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void HSFL1dll ( double * h , double * s , double * x , double * dmin , double * dmax , double * t , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='HSFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void HSFLSHdll ( double * h , double * s , double * z , double * t , double * p , double * d , double * dl , double * dv , double * x , double * y , double * q , double * e , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='HSFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void IDCRVdll ( double * d , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='IDCRVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void INFOdll ( int * icomp , double * wmm , double * ttrp , double * tnbpt , double * tc , double * pc , double * dc , double * zc , double * acf , double * dip , double * rgas ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='INFOdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void JICRVdll ( double * d , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='JICRVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void JTCRVdll ( double * d , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='JTCRVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void LIMITKdll ( char * htyp , int * icomp , double * t , double * d , double * p , double * tmin , double * tmax , double * dmax , double * pmax , int * i , char * herr , int htyp_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='LIMITKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void LIMITSdll ( char * htyp , double * x , double * tmin , double * tmax , double * dmax , double * pmax , int htyp_length ); 
fcns.thunkname{fcnNum}='voidcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='LIMITSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% void LIMITXdll ( char * htyp , double * t , double * d , double * p , double * x , double * tmin , double * tmax , double * dmax , double * pmax , int * ierr , char * herr , int htyp_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='LIMITXdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void LIQSPNDLdll ( double * t , double * x , double * rhol , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='LIQSPNDLdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void MASSFLUXdll ( double * tm , double * p , double * x , double * beta , double * rf , double * fluxm , double * cs , double * t0 , double * p0 , double * mach , double * u , double * ts , double * ps , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='MASSFLUXdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void MAXPdll ( double * x , double * tm , double * pm , double * dm , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='MAXPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void MAXTdll ( double * x , double * tm , double * pm , double * dm , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='MAXTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void MELTPdll ( double * p , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='MELTPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void MELTTdll ( double * t , double * x , double * p , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='MELTTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void MLTH2Odll ( double * t , double * p1 , double * p2 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLTH2Odll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void NAMEdll ( int * icomp , char * hnam , char * hn80 , char * hcasn , int hnam_length , int hn80_length , int hcasn_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringcstringcstringint32int32int32Thunk';fcns.name{fcnNum}='NAMEdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'cstring', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void PDFL1dll ( double * p , double * rho , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PDFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PDFLSHdll ( double * p , double * d , double * z , double * t , double * dl , double * dv , double * x , double * y , double * q , double * e , double * h , double * s , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PDFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PEFL1dll ( double * p , double * e , double * x , int * kph , double * t , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PEFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PEFLSHdll ( double * p , double * e , double * z , double * t , double * d , double * dl , double * dv , double * x , double * y , double * q , double * h , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PEFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PHFL1dll ( double * p , double * h , double * x , int * kph , double * t , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PHFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PHFLSHdll ( double * p , double * h , double * z , double * t , double * d , double * dl , double * dv , double * x , double * y , double * q , double * e , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PHFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PHI0dll ( int * itau , int * idel , double * t , double * rho , double * x , double * phi00 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PHI0dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void PHIXdll ( int * itau , int * idel , double * tau , double * del , double * x , double * phixx ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PHIXdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void PQFLSHdll ( double * p , double * q , double * z , int * kq , double * t , double * d , double * dl , double * dv , double * x , double * y , double * e , double * h , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PQFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PREOSdll ( int * i ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='PREOSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void PRESSdll ( double * t , double * rho , double * x , double * p ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='PRESSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void PSATKdll ( int * icomp , double * t , double * p , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PSATKdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PSFL1dll ( double * p , double * s , double * x , int * kph , double * t , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PSFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PSFLSHdll ( double * p , double * s , double * z , double * t , double * d , double * dl , double * dv , double * x , double * y , double * q , double * e , double * h , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='PSFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void PUREFLDdll ( int * icomp ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='PUREFLDdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void QMASSdll ( double * qmol , double * xl , double * xv , double * qkg , double * xlkg , double * xvkg , double * wliq , double * wvap , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='QMASSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void QMOLEdll ( double * qkg , double * xlkg , double * xvkg , double * qmol , double * xl , double * xv , double * wliq , double * wvap , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='QMOLEdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void RDXHMXdll ( int * ix , int * icmp , int * icmp2 , double * x , double * tred , double * dred , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='RDXHMXdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void REDXdll ( double * x , double * t , double * rho ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='REDXdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void RESIDUALdll ( double * t , double * rho , double * x , double * pr , double * er , double * hr , double * sr , double * cvr , double * cpr , double * ar , double * gr ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RESIDUALdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void RIEMdll ( double * t , double * rho , double * x , double * riemc ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RIEMdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void RMIX2dll ( double * x , double * rgas ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='RMIX2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void SATDdll ( double * rho , double * x , int * kph , int * kr , double * t , double * p , double * rhol , double * rhov , double * xliq , double * xvap , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATDdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATEdll ( double * e , double * x , int * kph , int * nroot , int * k1 , double * t1 , double * p1 , double * d1 , int * k2 , double * t2 , double * p2 , double * d2 , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATEdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATGUESSdll ( int * iphase , int * iprop , double * x , double * t , double * p , double * d , double * h , double * s , double * dy , double * y , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATGUESSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATGVdll ( double * t , double * p , double * z , double * vf , double * b , int * ipv , int * ityp , int * isp , double * rhox , double * rhoy , double * x , double * y , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATGVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATHdll ( double * h , double * x , int * kph , int * nroot , int * k1 , double * t1 , double * p1 , double * d1 , int * k2 , double * t2 , double * p2 , double * d2 , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATPESTdll ( double * p , double * x , int * kph , double * t , double * x2 , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATPESTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATPdll ( double * p , double * x , int * kph , double * t , double * rhol , double * rhov , double * xliq , double * xvap , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATSPLNdll ( double * x , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATSPLNdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATSdll ( double * s , double * x , int * kph , int * nroot , int * k1 , double * t1 , double * p1 , double * d1 , int * k2 , double * t2 , double * p2 , double * d2 , int * k3 , double * t3 , double * p3 , double * d3 , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATTESTdll ( double * t , double * x , int * kph , double * p , double * x2 , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATTESTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATTPdll ( double * t , double * p , double * x , int * kph , int * iguess , double * d , double * rhol , double * rhov , double * xliq , double * xvap , double * q , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATTPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SATTdll ( double * t , double * x , int * kph , double * p , double * rhol , double * rhov , double * xliq , double * xvap , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SATTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SETAGAdll ( int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SETAGAdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SETKTVdll ( int * icomp , int * jcomp , char * hmodij , double * fij , char * hfmix , int * ierr , char * herr , int hmodij_length , int hfmix_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrcstringvoidPtrcstringvoidPtrcstringint32int32int32Thunk';fcns.name{fcnNum}='SETKTVdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'cstring', 'doublePtr', 'cstring', 'int32Ptr', 'cstring', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void SETMIXdll ( char * hmxnme , char * hfmix , char * hrf , int * ncc , char * hfile , double * x , int * ierr , char * herr , int hmxnme_length , int hfmix_length , int hrf_length , int hfile_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidcstringcstringcstringvoidPtrcstringvoidPtrvoidPtrcstringint32int32int32int32int32Thunk';fcns.name{fcnNum}='SETMIXdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'int32Ptr', 'cstring', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void SETMODdll ( int * ncomp , char * htype , char * hmix , char * hcomp2 , int * ierr , char * herr , int htype_length , int hmix_length , int hcomp2_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringcstringcstringvoidPtrcstringint32int32int32int32Thunk';fcns.name{fcnNum}='SETMODdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'cstring', 'int32Ptr', 'cstring', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void SETNCdll ( int * ncomp ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='SETNCdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void SETPATHdll ( char * hpth , int hpth_length ); 
fcns.thunkname{fcnNum}='voidcstringint32Thunk';fcns.name{fcnNum}='SETPATHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'int32'};fcnNum=fcnNum+1;
% void SETREFdll ( char * hrf , int * ixflag , double * x0 , double * h0 , double * s0 , double * t0 , double * p0 , int * ierr , char * herr , int hrf_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32int32Thunk';fcns.name{fcnNum}='SETREFdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% void SETUPdll ( int * i , char * hfld , char * hfm , char * hrf , int * ierr , char * herr , int hfld_length , int hfm_length , int hrf_length , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringcstringcstringvoidPtrcstringint32int32int32int32Thunk';fcns.name{fcnNum}='SETUPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'cstring', 'int32Ptr', 'cstring', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% void SPLNROOTdll ( int * isp , int * iderv , double * f , double * a , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SPLNROOTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SPLNVALdll ( int * isp , int * iderv , double * a , double * f , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SPLNVALdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SUBLPdll ( double * p , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SUBLPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SUBLTdll ( double * t , double * x , double * p , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SUBLTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SURFTdll ( double * t , double * rho , double * x , double * sigma , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SURFTdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void SURTENdll ( double * t , double * rhol , double * rhov , double * xl , double * xv , double * sigma , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='SURTENdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TDFLSHdll ( double * t , double * d , double * x , double * p , double * dl , double * dv , double * xl , double * xv , double * q , double * e , double * h , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TDFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TEFL1dll ( double * t , double * e , double * x , double * dmin , double * dmax , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TEFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TEFLSHdll ( double * t , double * e , double * z , int * kr , double * p , double * d , double * dl , double * dv , double * x , double * y , double * q , double * h , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TEFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void THERM0dll ( double * t , double * rho , double * x , double * p , double * e , double * h , double * s , double * cv , double * cp , double * w , double * a , double * g ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='THERM0dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void THERM2dll ( double * t , double * rho , double * x , double * p , double * e , double * h , double * s , double * cv , double * cp , double * w , double * z , double * hjt , double * a , double * g , double * xkappa , double * beta , double * dpdd , double * d2pdd2 , double * dpdt , double * dddt , double * dddp , double * d2pt2 , double * d2pdtd , double * d2udt2 , double * spare4 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='THERM2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void THERM3dll ( double * t , double * rho , double * x , double * xkappa , double * beta , double * xisenk , double * xkt , double * betas , double * bs , double * xkkt , double * thrott , double * pi , double * spht ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='THERM3dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void THERMdll ( double * t , double * rho , double * x , double * p , double * e , double * h , double * s , double * cv , double * cp , double * w , double * hjt ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='THERMdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void THFL1dll ( double * t , double * h , double * x , double * dmin , double * dmax , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='THFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void THFLSHdll ( double * t , double * h , double * z , int * kr , double * p , double * d , double * dl , double * dv , double * x , double * y , double * q , double * e , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='THFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TPFL2dll ( double * t , double * p , double * z , double * dl , double * dv , double * x , double * y , double * q , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TPFL2dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TPFLSHdll ( double * t , double * p , double * z , double * d , double * dl , double * dv , double * x , double * y , double * q , double * e , double * h , double * s , double * cv , double * cp , double * w , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TPFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TPRHOPRdll ( double * t , double * p , double * x , double * rho1 , double * rho2 ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='TPRHOPRdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void TPRHOdll ( double * t , double * p , double * x , int * j , int * i , double * rho , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TPRHOdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TQFLSHdll ( double * t , double * q , double * z , int * kq , double * p , double * d , double * dl , double * dv , double * x , double * y , double * e , double * h , double * s , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TQFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TRNPRPdll ( double * t , double * rho , double * x , double * eta , double * tcx , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TRNPRPdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TSATDdll ( double * d , double * x , double * t , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TSATDdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TSFL1dll ( double * t , double * s , double * x , double * dmin , double * dmax , double * d , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TSFL1dll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void TSFLSHdll ( double * t , double * s , double * z , int * kr , double * p , double * d , double * dl , double * dv , double * x , double * y , double * q , double * e , double * h , double * cv , double * cp , double * w , int * i , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='TSFLSHdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void UNSETAGAdll (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='UNSETAGAdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void VAPSPNDLdll ( double * t , double * x , double * rhov , int * ierr , char * herr , int herr_length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringint32Thunk';fcns.name{fcnNum}='VAPSPNDLdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr', 'int32Ptr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% void VIRBAdll ( double * t , double * x , double * b ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='VIRBAdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void VIRBdll ( double * t , double * x , double * b ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='VIRBdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void VIRCAdll ( double * t , double * x , double * c ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='VIRCAdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void VIRCdll ( double * t , double * x , double * c ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='VIRCdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void WMOLdll ( double * x , double * wmm ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='WMOLdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void XMASSdll ( double * xmol , double * xkg , double * wmix ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XMASSdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void XMOLEdll ( double * xkg , double * xmol , double * wmix ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='XMOLEdll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
methodinfo=fcns;